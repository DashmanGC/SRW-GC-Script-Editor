/*
 * Copyright (C) 2014 Dashman
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * UserInterfaceSE.java
 *
 * Created on 24-jun-2014, 19:31:16
 */

package srwgcscripteditor;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Jonatan
 */
public class UserInterfaceSE extends javax.swing.JFrame {

    ArrayList<Dialogue> script;
    byte[] end_section;
    int current_dialogue = 0;
    String lastDirectory = ".";
    boolean file_loaded = false;
    String title = "SRW GC Script Editor v1.3 by Dashman";
    String current_file = "";
    
    String font_encoding = "MS932";
    
    /** Creates new form UserInterfaceSE */
    public UserInterfaceSE() {
        initComponents();

        this.setIconImage(new ImageIcon(getClass().getClassLoader().getResource("resources/icons/logo.png")).getImage());

        // Disable the CUT and PASTE operations in the original fields
        // Doesn't work unless we create a custom class that inherits from JTextArea
        // and we alter its action map.
        // It's not really that necessary though.
        /*ActionMap am = textareaOriginal.getActionMap();
        am.get("paste").setEnabled(false);
        am.get("cut").setEnabled(false);
        am.get("paste-from-clipboard").setEnabled(false);
        am.get("cut-to-clipboard").setEnabled(false);
        ActionMap am2 = textfieldSpeakerOriginal.getActionMap();
        am2.get("paste").setEnabled(false);
        am2.get("cut").setEnabled(false);
        am2.get("paste-from-clipboard").setEnabled(false);
        am2.get("cut-to-clipboard").setEnabled(false);*/
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelNavigation = new javax.swing.JPanel();
        buttonPrevious = new javax.swing.JButton();
        labelCurrent = new javax.swing.JLabel();
        buttonNext = new javax.swing.JButton();
        buttonJump = new javax.swing.JButton();
        textfieldJump = new javax.swing.JTextField();
        labelJump = new javax.swing.JLabel();
        panelOriginal = new javax.swing.JPanel();
        labelSexRoute = new javax.swing.JLabel();
        labelRobotRoute = new javax.swing.JLabel();
        labelSex = new javax.swing.JLabel();
        labelRobot = new javax.swing.JLabel();
        labelVoicedLine = new javax.swing.JLabel();
        labelVoiced = new javax.swing.JLabel();
        labelSpeakerOriginal = new javax.swing.JLabel();
        textfieldSpeakerOriginal = new javax.swing.JTextField();
        labelTextOriginal = new javax.swing.JLabel();
        scrollOriginal = new javax.swing.JScrollPane();
        textareaOriginal = new javax.swing.JTextArea();
        labelRemote = new javax.swing.JLabel();
        labelRemoteLine = new javax.swing.JLabel();
        panelEdit = new javax.swing.JPanel();
        scrollEditLeft = new javax.swing.JScrollPane();
        textareaEditLeft = new javax.swing.JTextArea();
        textfieldSpeakerEdit = new javax.swing.JTextField();
        labelSpeakerEdit = new javax.swing.JLabel();
        scrollEditRight = new javax.swing.JScrollPane();
        textareaEditRight = new javax.swing.JTextArea();
        checkFemale = new javax.swing.JCheckBox();
        labelRouteLeft = new javax.swing.JLabel();
        labelRouteRight = new javax.swing.JLabel();
        labelWidthUsedLeft = new javax.swing.JLabel();
        labelWidthLeft = new javax.swing.JLabel();
        labelWidthTotalLeft = new javax.swing.JLabel();
        labelWidthTotalRight = new javax.swing.JLabel();
        labelWidthRight = new javax.swing.JLabel();
        labelWidthUsedRight = new javax.swing.JLabel();
        panelSettings = new javax.swing.JPanel();
        checkConvert = new javax.swing.JCheckBox();
        labelLines = new javax.swing.JLabel();
        comboLines = new javax.swing.JComboBox();
        checkVWF = new javax.swing.JCheckBox();
        menubar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuitemOpen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        menuitemSave = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        menuitemExit = new javax.swing.JMenuItem();
        menuNavigate = new javax.swing.JMenu();
        menuitemPrevious = new javax.swing.JMenuItem();
        menuitemNext = new javax.swing.JMenuItem();
        menuitemFirst = new javax.swing.JMenuItem();
        menuitemLast = new javax.swing.JMenuItem();
        menuTools = new javax.swing.JMenu();
        menuitemConvertL = new javax.swing.JMenuItem();
        menuitemConvertR = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuitemHelp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SRW GC Script Editor v1.3 by Dashman");
        setResizable(false);

        panelNavigation.setBorder(javax.swing.BorderFactory.createTitledBorder("Navigation"));

        buttonPrevious.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonPrevious.setForeground(new java.awt.Color(0, 51, 255));
        buttonPrevious.setText("<<");
        buttonPrevious.setEnabled(false);
        buttonPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPreviousActionPerformed(evt);
            }
        });

        labelCurrent.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelCurrent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelCurrent.setText("0 / 0");
        labelCurrent.setEnabled(false);

        buttonNext.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonNext.setForeground(new java.awt.Color(0, 51, 255));
        buttonNext.setText(">>");
        buttonNext.setEnabled(false);
        buttonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextActionPerformed(evt);
            }
        });

        buttonJump.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonJump.setText("GO!");
        buttonJump.setEnabled(false);
        buttonJump.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonJumpActionPerformed(evt);
            }
        });

        textfieldJump.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textfieldJump.setEnabled(false);
        textfieldJump.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textfieldJumpActionPerformed(evt);
            }
        });

        labelJump.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelJump.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelJump.setText("Jump to:");
        labelJump.setEnabled(false);

        javax.swing.GroupLayout panelNavigationLayout = new javax.swing.GroupLayout(panelNavigation);
        panelNavigation.setLayout(panelNavigationLayout);
        panelNavigationLayout.setHorizontalGroup(
            panelNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNavigationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelCurrent, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonNext, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelJump, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textfieldJump, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonJump, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelNavigationLayout.setVerticalGroup(
            panelNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNavigationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonPrevious)
                    .addComponent(labelCurrent)
                    .addComponent(buttonNext)
                    .addComponent(buttonJump)
                    .addComponent(textfieldJump, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelJump))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelOriginal.setBorder(javax.swing.BorderFactory.createTitledBorder("Original"));

        labelSexRoute.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelSexRoute.setText("Sex Route:");

        labelRobotRoute.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelRobotRoute.setText("Robot Route:");

        labelSex.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelSex.setForeground(new java.awt.Color(102, 102, 102));
        labelSex.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSex.setText("COMMON");

        labelRobot.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelRobot.setForeground(new java.awt.Color(102, 102, 102));
        labelRobot.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRobot.setText("COMMON");

        labelVoicedLine.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelVoicedLine.setText("Voiced Line:");

        labelVoiced.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelVoiced.setForeground(new java.awt.Color(255, 51, 51));
        labelVoiced.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelVoiced.setText("NO");

        labelSpeakerOriginal.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelSpeakerOriginal.setText("Speaker:");

        textfieldSpeakerOriginal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldSpeakerOriginalKeyTyped(evt);
            }
        });

        labelTextOriginal.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelTextOriginal.setText("Text:");

        textareaOriginal.setColumns(20);
        textareaOriginal.setRows(5);
        textareaOriginal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textareaOriginalKeyTyped(evt);
            }
        });
        scrollOriginal.setViewportView(textareaOriginal);

        labelRemote.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelRemote.setForeground(new java.awt.Color(255, 51, 51));
        labelRemote.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRemote.setText("NO");

        labelRemoteLine.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelRemoteLine.setText("Remote Line:");

        javax.swing.GroupLayout panelOriginalLayout = new javax.swing.GroupLayout(panelOriginal);
        panelOriginal.setLayout(panelOriginalLayout);
        panelOriginalLayout.setHorizontalGroup(
            panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOriginalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOriginalLayout.createSequentialGroup()
                        .addComponent(scrollOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelOriginalLayout.createSequentialGroup()
                            .addGroup(panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelOriginalLayout.createSequentialGroup()
                                    .addComponent(labelSexRoute, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(labelSex, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelOriginalLayout.createSequentialGroup()
                                    .addGroup(panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(labelSpeakerOriginal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(labelVoicedLine, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labelRobotRoute, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panelOriginalLayout.createSequentialGroup()
                                            .addComponent(labelVoiced, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(labelRemoteLine, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(labelRemote, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(labelRobot, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(textfieldSpeakerOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addContainerGap())
                        .addGroup(panelOriginalLayout.createSequentialGroup()
                            .addComponent(labelTextOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(311, 311, 311)))))
        );
        panelOriginalLayout.setVerticalGroup(
            panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOriginalLayout.createSequentialGroup()
                .addGroup(panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSexRoute)
                    .addComponent(labelSex))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRobotRoute)
                    .addComponent(labelRobot))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelVoicedLine)
                    .addComponent(labelVoiced)
                    .addComponent(labelRemoteLine)
                    .addComponent(labelRemote))
                .addGap(18, 18, 18)
                .addGroup(panelOriginalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSpeakerOriginal)
                    .addComponent(textfieldSpeakerOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelTextOriginal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollOriginal)
                .addContainerGap())
        );

        panelEdit.setBorder(javax.swing.BorderFactory.createTitledBorder("Edit"));

        textareaEditLeft.setColumns(20);
        textareaEditLeft.setRows(5);
        textareaEditLeft.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textareaEditLeftKeyTyped(evt);
            }
        });
        scrollEditLeft.setViewportView(textareaEditLeft);

        textfieldSpeakerEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldSpeakerEditKeyTyped(evt);
            }
        });

        labelSpeakerEdit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelSpeakerEdit.setText("Speaker:");

        textareaEditRight.setBackground(new java.awt.Color(220, 220, 220));
        textareaEditRight.setColumns(20);
        textareaEditRight.setRows(5);
        textareaEditRight.setEnabled(false);
        textareaEditRight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textareaEditRightKeyTyped(evt);
            }
        });
        scrollEditRight.setViewportView(textareaEditRight);

        checkFemale.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkFemale.setText("Use alternative text for female");
        checkFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkFemaleActionPerformed(evt);
            }
        });

        labelRouteLeft.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelRouteLeft.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRouteLeft.setText("COMMON ROUTE");

        labelRouteRight.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelRouteRight.setForeground(new java.awt.Color(153, 153, 153));
        labelRouteRight.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRouteRight.setText("NOT IN USE");

        labelWidthUsedLeft.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWidthUsedLeft.setText("Pixels in use (width):");

        labelWidthLeft.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWidthLeft.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelWidthLeft.setText("???");

        labelWidthTotalLeft.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWidthTotalLeft.setText("/  324");

        labelWidthTotalRight.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWidthTotalRight.setText("/  324");
        labelWidthTotalRight.setEnabled(false);

        labelWidthRight.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWidthRight.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelWidthRight.setText("???");
        labelWidthRight.setEnabled(false);

        labelWidthUsedRight.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWidthUsedRight.setText("Pixels in use (width):");
        labelWidthUsedRight.setEnabled(false);

        javax.swing.GroupLayout panelEditLayout = new javax.swing.GroupLayout(panelEdit);
        panelEdit.setLayout(panelEditLayout);
        panelEditLayout.setHorizontalGroup(
            panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelRouteLeft, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                    .addComponent(scrollEditLeft, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelEditLayout.createSequentialGroup()
                        .addComponent(labelSpeakerEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textfieldSpeakerEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(52, 52, 52)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(labelRouteRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollEditRight, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                    .addComponent(checkFemale, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
            .addGroup(panelEditLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(labelWidthUsedLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelWidthLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelWidthTotalLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelWidthUsedRight, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelWidthRight, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelWidthTotalRight, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(133, 133, 133))
        );
        panelEditLayout.setVerticalGroup(
            panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSpeakerEdit)
                    .addComponent(textfieldSpeakerEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkFemale))
                .addGap(26, 26, 26)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollEditRight, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrollEditLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelRouteLeft)
                    .addComponent(labelRouteRight))
                .addGap(18, 18, 18)
                .addGroup(panelEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelWidthUsedLeft)
                    .addComponent(labelWidthLeft)
                    .addComponent(labelWidthTotalLeft)
                    .addComponent(labelWidthUsedRight)
                    .addComponent(labelWidthRight)
                    .addComponent(labelWidthTotalRight))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        panelSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        checkConvert.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkConvert.setSelected(true);
        checkConvert.setText("Convert keystrokes to SJIS");

        labelLines.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelLines.setText("Number of lines per dialogue:");

        comboLines.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "3", "4" }));
        comboLines.setSelectedIndex(1);

        checkVWF.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkVWF.setSelected(true);
        checkVWF.setText("Use VWF to calculate width");

        javax.swing.GroupLayout panelSettingsLayout = new javax.swing.GroupLayout(panelSettings);
        panelSettings.setLayout(panelSettingsLayout);
        panelSettingsLayout.setHorizontalGroup(
            panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkConvert)
                .addGap(35, 35, 35)
                .addComponent(labelLines)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboLines, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addComponent(checkVWF, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
        );
        panelSettingsLayout.setVerticalGroup(
            panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkConvert)
                    .addComponent(labelLines)
                    .addComponent(comboLines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkVWF))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        menuFile.setText("File");

        menuitemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuitemOpen.setText("Open...");
        menuitemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemOpenActionPerformed(evt);
            }
        });
        menuFile.add(menuitemOpen);
        menuFile.add(jSeparator1);

        menuitemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuitemSave.setText("Save as...");
        menuitemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemSaveActionPerformed(evt);
            }
        });
        menuFile.add(menuitemSave);
        menuFile.add(jSeparator2);

        menuitemExit.setText("Exit");
        menuitemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuitemExit);

        menubar.add(menuFile);

        menuNavigate.setText("Navigate");

        menuitemPrevious.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_UP, 0));
        menuitemPrevious.setText("Previous");
        menuitemPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemPreviousActionPerformed(evt);
            }
        });
        menuNavigate.add(menuitemPrevious);

        menuitemNext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_DOWN, 0));
        menuitemNext.setText("Next");
        menuitemNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemNextActionPerformed(evt);
            }
        });
        menuNavigate.add(menuitemNext);

        menuitemFirst.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_HOME, java.awt.event.InputEvent.CTRL_MASK));
        menuitemFirst.setText("First");
        menuitemFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemFirstActionPerformed(evt);
            }
        });
        menuNavigate.add(menuitemFirst);

        menuitemLast.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_END, java.awt.event.InputEvent.CTRL_MASK));
        menuitemLast.setText("Last");
        menuitemLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemLastActionPerformed(evt);
            }
        });
        menuNavigate.add(menuitemLast);

        menubar.add(menuNavigate);

        menuTools.setText("Tools");

        menuitemConvertL.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuitemConvertL.setText("Convert LEFT textarea to SJIS");
        menuitemConvertL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemConvertLActionPerformed(evt);
            }
        });
        menuTools.add(menuitemConvertL);

        menuitemConvertR.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuitemConvertR.setText("Convert RIGHT textarea to SJIS");
        menuitemConvertR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemConvertRActionPerformed(evt);
            }
        });
        menuTools.add(menuitemConvertR);

        menubar.add(menuTools);

        menuHelp.setLabel("?");

        menuitemHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        menuitemHelp.setLabel("Help");
        menuitemHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemHelpActionPerformed(evt);
            }
        });
        menuHelp.add(menuitemHelp);

        menubar.add(menuHelp);

        setJMenuBar(menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(panelOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelNavigation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelNavigation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textfieldSpeakerOriginalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldSpeakerOriginalKeyTyped
        // TODO add your handling code here:
        evt.consume();
    }//GEN-LAST:event_textfieldSpeakerOriginalKeyTyped

    private void textareaOriginalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textareaOriginalKeyTyped
        // TODO add your handling code here:
        evt.consume();
    }//GEN-LAST:event_textareaOriginalKeyTyped

    private void textareaEditLeftKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textareaEditLeftKeyTyped
        // TODO add your handling code here:
        if (checkConvert.isSelected())
            filterKeys((javax.swing.JTextArea)evt.getComponent(), evt);
        
        writeWidth(textareaEditLeft, labelWidthLeft);
    }//GEN-LAST:event_textareaEditLeftKeyTyped

    private void textfieldSpeakerEditKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldSpeakerEditKeyTyped
        // TODO add your handling code here:
        if (checkConvert.isSelected())
            filterKeys((javax.swing.JTextField)evt.getComponent(), evt);
    }//GEN-LAST:event_textfieldSpeakerEditKeyTyped

    private void textareaEditRightKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textareaEditRightKeyTyped
        // TODO add your handling code here:
        if (evt.getComponent().isEnabled() && checkConvert.isSelected())
            filterKeys((javax.swing.JTextArea)evt.getComponent(), evt);
        
        writeWidth(textareaEditRight, labelWidthRight);
}//GEN-LAST:event_textareaEditRightKeyTyped

    private void checkFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkFemaleActionPerformed
        // TODO add your handling code here:
        if (checkFemale.isSelected()){  // Enable textareaEditRight
            if (textareaEditRight.getText().isEmpty())
                textareaEditRight.setText(textareaEditLeft.getText());
            textareaEditRight.setEnabled(true);
            textareaEditRight.setBackground(new Color(255, 255, 255));
            labelRouteRight.setForeground(new Color(255, 153, 255));
            labelRouteRight.setText("FEMALE ROUTE");
            labelRouteLeft.setForeground(new Color(0, 204, 255));
            labelRouteLeft.setText("MALE ROUTE");

            labelWidthUsedRight.setEnabled(true);
            labelWidthRight.setEnabled(true);
            labelWidthTotalRight.setEnabled(true);
            //buttonWidthRight.setEnabled(true);
        }
        else{   // Disable textareaEditRight
            textareaEditRight.setEnabled(false);
            textareaEditRight.setBackground(new Color(220, 220, 220));
            labelRouteRight.setForeground(new Color(153, 153, 153));
            labelRouteRight.setText("NOT IN USE");
            labelRouteLeft.setForeground(new Color(0, 0, 0));
            labelRouteLeft.setText("COMMON ROUTE");

            labelWidthUsedRight.setEnabled(false);
            labelWidthRight.setEnabled(false);
            labelWidthTotalRight.setEnabled(false);
            //buttonWidthRight.setEnabled(false);
        }
    }//GEN-LAST:event_checkFemaleActionPerformed

    private void buttonJumpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonJumpActionPerformed
        // TODO add your handling code here:
        int num_page = Integer.valueOf(textfieldJump.getText());
        jumpTo(num_page - 1);   // We give the illusion that we count pages starting from 1
    }//GEN-LAST:event_buttonJumpActionPerformed

    private void textfieldJumpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textfieldJumpActionPerformed
        // TODO add your handling code here:
        buttonJump.doClick();
    }//GEN-LAST:event_textfieldJumpActionPerformed

    private void buttonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextActionPerformed
        // TODO add your handling code here:
        changePage(1);
    }//GEN-LAST:event_buttonNextActionPerformed

    private void buttonPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPreviousActionPerformed
        // TODO add your handling code here:
        changePage(-1);
    }//GEN-LAST:event_buttonPreviousActionPerformed

    private void menuitemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemOpenActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File(lastDirectory));
        chooser.setDialogTitle("Load BIN file");
        chooser.setFileFilter(new FileNameExtensionFilter("BIN file", "bin"));
        if (!current_file.isEmpty())
            chooser.setSelectedFile(new File(current_file));

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            current_file = chooser.getSelectedFile().getName();
            
            openFile(chooser.getSelectedFile().getAbsolutePath());
            
            lastDirectory = chooser.getSelectedFile().getPath();
        }
    }//GEN-LAST:event_menuitemOpenActionPerformed

    private void menuitemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemSaveActionPerformed
        // TODO add your handling code here:
        if (file_loaded){
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File(lastDirectory));
            chooser.setDialogTitle("Save BIN file");
            chooser.setFileFilter(new FileNameExtensionFilter("BIN file", "bin"));
            if (!current_file.isEmpty())
                chooser.setSelectedFile(new File(current_file));

            saveDialogue(); // Save the current dialogue, just in case.

            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                current_file = chooser.getSelectedFile().getName();

                saveFile(chooser.getSelectedFile().getAbsolutePath());

                lastDirectory = chooser.getSelectedFile().getPath();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No file loaded!",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuitemSaveActionPerformed

    private void menuitemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_menuitemExitActionPerformed

    private void menuitemConvertLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemConvertLActionPerformed
        // TODO add your handling code here:
        convertToSJIS(textareaEditLeft);
    }//GEN-LAST:event_menuitemConvertLActionPerformed

    private void menuitemConvertRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemConvertRActionPerformed
        // TODO add your handling code here:
        convertToSJIS(textareaEditRight);
    }//GEN-LAST:event_menuitemConvertRActionPerformed

    private void menuitemHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemHelpActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null,
                "The game recognizes some codes written with two\n" +
                "1-byte characters in the script. You can reproduce this effect\n" +
                "by disabling 'Convert keystrokes to SJIS' and entering them manually.\n" +
                "\nHowever, you DON'T want to use most of those.\n\n" +
                "These are the safe ones to use:\n" +
                "  - AA: Prints the Main Character's short name (Akimi)\n" +
                "  - FF: Prints the Main Character's full name (Akimi Akatsuki)\n" +
                "You'll need to use these at some points in the script.\n\n" +
                "\nThese are *some* of the non-safe ones (DON'T USE THEM):\n" +
                "  - KK: Indicates the end of a line.\n" +
                "  - EE: Indicates the end of the dialogue.\n" +
                "  - TT: Before a character's name, indicates it's 'remote', that is,\n" +
                "       the character is shown through some sort of communicator.\n",
                "Help", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_menuitemHelpActionPerformed

    private void menuitemPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemPreviousActionPerformed
        // TODO add your handling code here:
        if (buttonPrevious.isEnabled())
        buttonPrevious.doClick();
    }//GEN-LAST:event_menuitemPreviousActionPerformed

    private void menuitemNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemNextActionPerformed
        // TODO add your handling code here:
        if (buttonNext.isEnabled())
        buttonNext.doClick();
    }//GEN-LAST:event_menuitemNextActionPerformed

    private void menuitemFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemFirstActionPerformed
        // TODO add your handling code here:
        jumpTo(0);
    }//GEN-LAST:event_menuitemFirstActionPerformed

    private void menuitemLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemLastActionPerformed
        // TODO add your handling code here:
        if (!script.isEmpty())
        jumpTo(script.size());
    }//GEN-LAST:event_menuitemLastActionPerformed



    public void openFile(String bin_file){
        parseFile(bin_file);

        labelCurrent.setEnabled(file_loaded);
        labelJump.setEnabled(file_loaded);
        textfieldJump.setEnabled(file_loaded);
        buttonJump.setEnabled(file_loaded);

        current_dialogue = 0;

        updateControls();

        if (!file_loaded){
            textfieldSpeakerOriginal.setText("");
            textfieldSpeakerEdit.setText("");
            textareaOriginal.setText("");
            textareaEditLeft.setText("");
            textareaEditRight.setText("");
            labelCurrent.setText("0 / 0");
            buttonNext.setEnabled(false);   // updateControls() doesn't take into account there's no data anymore
            this.setTitle(title);

            JOptionPane.showMessageDialog(null, "The file didn't have any script text!",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            this.setTitle(current_file + " - " + title);
            loadDialogue();
        }
    }


    public void parseFile(String path){
        RandomAccessFile f;
        file_loaded = false;
        script = new ArrayList<Dialogue>();

        try {
            f = new RandomAccessFile(path, "r");

            byte[] chunk = new byte[2];

            int offset = 0;
            int size = 0;

            int sex = 0;
            int robot = 0;
            int last_branch = 0;

            Dialogue d;

            int max = (int) f.length();
            boolean end = false;

            while(!end){
                //System.out.println("First loop");
                // Keep reading 2 bytes until we reach one of the opcodes for displaying a message
                // (either 70 34 or 70 35) or the end of the file
                // If we run into one of the branch codes ( 70 c2 or 70 f7 ), change our flags
                boolean found = false;

                while (!found && !end){
                    f.read(chunk);
                    size += 2;

                    if (chunk[0] == 0x70){  // Opcode found
                        int value = (chunk[1] & 0xff);  // If we don't do this, values greater than 0x7f are taken as negative
                                                        // For example, 0x80 would count as 0xFF80
                        //System.out.println("Opcode: " + value );

                        if (value == 0x34 || value == 0x35){
                            //System.out.println("Dialogue.");
                            found = true;
                            f.read(chunk);  // Character ID
                            size += 2;
                            f.read(chunk);  // Portrait ID
                            size += 2;
                        }
                        else if (value == 0xf7){ // End last branch
                            //System.out.println("End of branch.");
                            if (last_branch > 1){
                                robot = 0;
                                last_branch = sex;
                            }
                            else{
                                sex = 0;
                                last_branch = robot;
                            }
                        }
                        else if (value == 0xc2){ // New branch
                            f.read(chunk);
                            size += 2;
                            last_branch = (chunk[1] & 0xff);
                            //System.out.println("New branch: " + last_branch);

                            if (last_branch > 1)    // Values from 2 to 3 (there could be more!)
                                robot = last_branch - 1;    // Accepted values from 0 to 2
                            else                    // Values from 0 to 1
                                sex = last_branch + 1;      // Accepted values from 0 to 2
                        }
                    }

                    if (offset + size >= max)
                        end = true;
                }
                //System.out.println("End of first loop");

                if (found){   // Text found
                    // Determine if the opcode takes 6 bytes (no voice) or 8 (voice) and advance if it's 8
                    boolean voice = false;
                    boolean remote = false;
                    f.read(chunk);
                    int value = chunk[0] & 0xff;
                    if (value < 0x40){   // Minimum should be 0x41, from the AA for Akimi's name
                        //System.out.println("Dialogue uses voice: " + value);
                        voice = true;
                        f.read(chunk);  // There's a chance that a voiced line is ALSO remote
                        size += 2;
                    }
                    if (chunk[0] == 0x54 && chunk[1] == 0x54){
                        //System.out.println("Potrait is 'remote': " + (int) chunk[0]);
                        remote = true;
                        size += 2;
                    }

                    // Save all that has been read as opcodes
                    f.seek(offset);
                    byte[] aux = new byte[size];
                    f.read(aux);

                    // Update offset and reset size
                    offset += size;
                    size = 0;

                    // We're currently at the beginning of the text
                    // Read until we find an "EE" ( 45 45 )
                    // When we find a "KK" ( 4b 4b ) save a line
                    found = false;
                    String text = "";

                    while (!found){
                        //System.out.println("Text loop");
                        f.read(chunk);
                        size += 2;

                        if (chunk[0] == 0x45 && chunk[1] == 0x45){  // End of text
                            found = true;
                            size -= 2;  // We don't include the "EE" in the text!!

                            // Save the last line
                            f.seek(offset);
                            byte[] aux2 = new byte[size];
                            f.read(aux2);
                            text += hex2string(aux2);

                            // Update offset, reset size
                            offset += size + 2; // We take into account the "EE" again
                            size = 0;

                            f.read(chunk);  // Read the "EE" again
                        }
                        else if (chunk[0] == 0x4b && chunk[1] == 0x4b){ // Line found
                            size -= 2;  // We don't include the "KK" in the text!!

                            // Save the line
                            f.seek(offset);
                            byte[] aux2 = new byte[size];
                            f.read(aux2);
                            text += hex2string(aux2) + "\n";

                            // Update offset, reset size
                            offset += size + 2; // We take into account the "KK" again
                            size = 0;

                            f.read(chunk);  // Read the "KK" again
                        }
                    }

                    // Create a dialogue with all the data found and insert it in the script
                    d = new Dialogue(aux, text, sex, robot, voice, remote);

                    script.add(d);
                }
            }
            //System.out.println("Check last part");

            if (script.size() > 0){ // There was text, read the last set of opcodes
                file_loaded = true;

                // Read the last part of the file
                f.seek(offset);
                byte[] aux = new byte[size];
                f.read(aux);

                // Determine how much padding exists
                int padding = 0;
                boolean stop = false;
                for (int i = aux.length - 1; i >= 0 && !stop; i--){
                    if (aux[i] == 0)
                        padding++;
                    else
                        stop = true;
                }

                // Save the unpadded data into end_section
                end_section = new byte[size - padding];

                for (int i = 0; i < end_section.length; i++)
                    end_section[i] = aux[i];

            }

            f.close();  // END

        } catch (IOException ex) {
            Logger.getLogger(UserInterfaceSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    public void saveFile(String bin_file){
        byte[][] dialogues = new byte[script.size()][];
        int size = 0;
        int lines = comboLines.getSelectedIndex() + 3; // 0 = 3, 1 = 4

        for (int i = 0; i < script.size(); i++){    // Save each dialogue in the script as a byte array
            dialogues[i] = script.get(i).getBytes(lines);   // lines is the number of lines that count as a dialogue
                                                            // This is used to allow expanding an existing dialogue
            size += dialogues[i].length;
        }

        size += end_section.length;

        int extra_bytes = size % 32;    // The file must be 32-byte aligned
        byte[] padding = null;
        if (extra_bytes > 0)
            padding = new byte[32 - extra_bytes];

        try {
            RandomAccessFile f = new RandomAccessFile(bin_file, "rw");

            for (int i = 0; i < dialogues.length; i++)
                f.write(dialogues[i]);

            f.write(end_section);

            if (padding != null)
                f.write(padding);

            f.close();  // END
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Could not write file to disk!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(UserInterfaceSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    public String hex2string(byte[] sjis_bytes){
        String sjis_text = "";

        try {
            sjis_text = new String(sjis_bytes, font_encoding);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(UserInterfaceSE.class.getName()).log(Level.SEVERE, null, ex);
        }

        return sjis_text;
    }


    public void changePage(int delta){
        saveDialogue();
        current_dialogue += delta;
        loadDialogue();

        updateControls();
    }

    
    public void jumpTo(int num){
        saveDialogue();

        current_dialogue = num;

        if (num < 0)
            current_dialogue = 0;
        else if (current_dialogue > (script.size() - 2) )
            current_dialogue = (script.size() - 1);

        //System.out.println("current: " + current_dialogue + " max: " + script.size());
        loadDialogue();

        updateControls();
    }


    public void updateControls(){
        labelCurrent.setText( (current_dialogue + 1) + " / " + script.size() );
        buttonPrevious.setEnabled(current_dialogue != 0);
        buttonNext.setEnabled(current_dialogue != script.size() - 1);
    }


    public void saveDialogue(){
        script.get(current_dialogue).speaker = textfieldSpeakerEdit.getText();  // Might have changed

        if (checkFemale.isSelected()){
            script.get(current_dialogue).common = "";
            script.get(current_dialogue).male = getTextWithMargin( textareaEditLeft.getText() );
            script.get(current_dialogue).female = getTextWithMargin( textareaEditRight.getText() );
        }
        else{
            script.get(current_dialogue).common = getTextWithMargin( textareaEditLeft.getText() );
            script.get(current_dialogue).male = "";
            script.get(current_dialogue).female = "";
        }
    }

    // Returns a string in which there's an empty SJIS space at the beginning of each line
    public String getTextWithMargin(String s){
        String result = "";

        String[] lines = s.split("\n");
        for (int i = 0; i < lines.length; i++){
            // Add two empty SJIS spaces to the beginning of each line if it doesn't start with two empty spaces
            if (!lines[i].startsWith("　　")){
                if (lines[i].startsWith("　"))   // If it starts with ONE space, we add another
                    result += "　";
                else
                    result += "　　";
            }

            result += lines[i];
            if (i != lines.length - 1)
                result += "\n";
        }

        return result;
    }


    public void loadDialogue(){
        String[] lines = script.get(current_dialogue).original.split("\n");

        textfieldSpeakerOriginal.setText(lines[0]);

        String body = "";
        for (int i = 1; i < lines.length; i++)
            body += lines[i] + "\n";
        textareaOriginal.setText(body);

        switch (script.get(current_dialogue).char_sex){
            case 0:
                labelSex.setText("COMMON");
                labelSex.setForeground(new Color(102, 102, 102));
                checkFemale.setEnabled(true);   // The option to make a female version of the script
                                                // only applies here!
                break;
            case 1:
                labelSex.setText("MALE");
                labelSex.setForeground(new Color(0, 204, 255));
                checkFemale.setSelected(false);
                checkFemale.setEnabled(false);
                break;
            case 2:
                labelSex.setText("FEMALE");
                labelSex.setForeground(new Color(255, 153, 255));
                checkFemale.setSelected(false);
                checkFemale.setEnabled(false);
                break;
        }

        switch (script.get(current_dialogue).robot_type){
            case 0:
                labelRobot.setText("COMMON");
                labelRobot.setForeground(new Color(102, 102, 102));
                break;
            case 1:
                labelRobot.setText("SUPER");
                labelRobot.setForeground(new Color(255, 153, 0));
                break;
            case 2:
                labelRobot.setText("REAL");
                labelRobot.setForeground(Color.MAGENTA);
                break;
            default:    // This might never happen. It could trigger when getting the Layzner upgrade, maybe.
                labelRobot.setText("EXTRA");
                labelRobot.setForeground(Color.WHITE);
                break;
        }

        if (script.get(current_dialogue).voiced){
            labelVoiced.setText("YES");
            labelVoiced.setForeground(new Color(51, 204, 0));
        }
        else{
            labelVoiced.setText("NO");
            labelVoiced.setForeground(Color.RED);
        }

        if (script.get(current_dialogue).remote){
            labelRemote.setText("YES");
            labelRemote.setForeground(new Color(51, 204, 0));
        }
        else{
            labelRemote.setText("NO");
            labelRemote.setForeground(Color.RED);
        }

        textfieldSpeakerEdit.setText(script.get(current_dialogue).speaker);

        if (!script.get(current_dialogue).male.isEmpty() || !script.get(current_dialogue).female.isEmpty()){
            textareaEditLeft.setText(script.get(current_dialogue).male);
            textareaEditRight.setText(script.get(current_dialogue).female);

            checkFemale.setSelected(true);  // It *should* be enabled. We can only get to this when sex is COMMON

            textareaEditRight.setEnabled(true);
            textareaEditRight.setBackground(new Color(255, 255, 255));

            labelWidthUsedRight.setEnabled(true);
            labelWidthRight.setEnabled(true);
            labelWidthTotalRight.setEnabled(true);
            //buttonWidthRight.setEnabled(true);

            labelRouteLeft.setText("MALE");
            labelRouteRight.setText("FEMALE");
            labelRouteLeft.setForeground(new Color(0, 204, 255));
            labelRouteRight.setForeground(new Color(255, 153, 255));

            writeWidth(textareaEditRight, labelWidthRight); 
        }
        else{
            textareaEditLeft.setText(script.get(current_dialogue).common);
            textareaEditRight.setText("");

            checkFemale.setSelected(false);

            textareaEditRight.setEnabled(false);
            textareaEditRight.setBackground(new Color(220, 220, 220));

            labelWidthUsedRight.setEnabled(false);
            labelWidthRight.setEnabled(false);
            labelWidthTotalRight.setEnabled(false);
            //buttonWidthRight.setEnabled(false);

            labelRouteLeft.setText("COMMON");
            labelRouteRight.setText("NOT IN USE");
            labelRouteLeft.setForeground(new Color(0, 0, 0));
            labelRouteRight.setForeground(new Color(153, 153, 153));
            
            labelWidthRight.setText("???");
            labelWidthRight.setForeground(new Color(0, 0, 0));
        }
        
        writeWidth(textareaEditLeft, labelWidthLeft);

        //labelWidthRight.setText("???");
        //labelWidthLeft.setText("???");
        //labelWidthRight.setForeground(new Color(0, 0, 0));
        //labelWidthLeft.setForeground(new Color(0, 0, 0));
    }


    public void writeWidth(javax.swing.JTextArea ta, javax.swing.JLabel la){
        int width = 0;

        String text = ta.getText();

        if (!text.isEmpty()){
            String[] lines = text.split("\n");

            for (int i = 0; i < lines.length; i++){
                int line_size = 0;
                //line_size = lines[i].length() * 18; // Each character is 18x18 in the original
                for (int j = 0; j < lines[i].length(); j++){
                    char c = lines[i].charAt(j);
                    if (c < '　')   // Empty space in SJIS, pretty much the first possible character in SJIS
                        line_size += 10;    // We add the width of an ASCII character
                    else{
                        if (checkVWF.isSelected())
                            line_size += VWF(c);
                        else
                            line_size += 18;    // We add the width of a SJIS character
                    }
                }

                // Add the width of two empty SJIS spaces if the first characters are NOT two empty SJIS spaces
                // This is to take into account the margin even before it's applied
                if (lines[i].length() > 1){
                    if (lines[i].charAt(0) != '　')
                        line_size += VWF('　');

                    if (lines[i].charAt(1) != '　')
                        line_size += VWF('　');
                }

                if (line_size > width)
                    width = line_size;
            }
        }

        la.setText("" + width);
        if (width > 324)
            la.setForeground(new Color(255, 0, 0));
        else
            la.setForeground(new Color(0, 0, 0));
    }


    public int VWF(char c){
        int width = 18;

        switch (c){
            case '　':
                width = 6;
                break;
            case '，':
                width = 5;
                break;
            case '．':
                width = 4;
                break;
            case '：':
                width = 4;
                break;
            case '；':
                width = 5;
                break;
            case '？':
                width = 9;
                break;
            case '！':
                width = 4;
                break;
            case '‐':
                width = 7;
                break;
            case '／':
                width = 10;
                break;
            case '＼':
                width = 9;
                break;

            case '～':
                width = 10;
                break;
            case '（':
                width = 6;
                break;
            case '）':
                width = 6;
                break;
            case '［':
                width = 6;
                break;
            case '］':
                width = 6;
                break;
            case '｛':
                width = 8;
                break;
            case '｝':
                width = 8;
                break;
            case '＋':
                width = 10;
                break;
            case '－':
                width = 7;
                break;
            case '±':
                width = 10;
                break;

            case '＜':
                width = 10;
                break;
            case '＞':
                width = 10;
                break;
            case '′':
                width = 4;
                break;
            case '″':
                width = 8;
                break;
            case '％':
                width = 12;
                break;
            case '＃':
                width = 10;
                break;
            case '＆':
                width = 9;
                break;
            case '＊':
                width = 8;
                break;
            case '＠':
                width = 10;
                break;
            case '０':
                width = 9;
                break;

            case '１':
                width = 9;
                break;
            case '２':
                width = 9;
                break;
            case '３':
                width = 9;
                break;
            case '４':
                width = 9;
                break;
            case '５':
                width = 9;
                break;
            case '６':
                width = 9;
                break;
            case '７':
                width = 9;
                break;
            case '８':
                width = 9;
                break;
            case '９':
                width = 9;
                break;
            case 'Ａ':
                width = 9;
                break;

            case 'Ｂ':
                width = 9;
                break;
            case 'Ｃ':
                width = 8;
                break;
            case 'Ｄ':
                width = 9;
                break;
            case 'Ｅ':
                width = 9;
                break;
            case 'Ｆ':
                width = 9;
                break;
            case 'Ｇ':
                width = 9;
                break;
            case 'Ｈ':
                width = 9;
                break;
            case 'Ｉ':
                width = 8;
                break;
            case 'Ｊ':
                width = 9;
                break;
            case 'Ｋ':
                width = 9;
                break;

            case 'Ｌ':
                width = 9;
                break;
            case 'Ｍ':
                width = 9;
                break;
            case 'Ｎ':
                width = 9;
                break;
            case 'Ｏ':
                width = 9;
                break;
            case 'Ｐ':
                width = 9;
                break;
            case 'Ｑ':
                width = 9;
                break;
            case 'Ｒ':
                width = 9;
                break;
            case 'Ｓ':
                width = 9;
                break;
            case 'Ｔ':
                width = 9;
                break;
            case 'Ｕ':
                width = 9;
                break;

            case 'Ｖ':
                width = 9;
                break;
            case 'Ｗ':
                width = 10;
                break;
            case 'Ｘ':
                width = 9;
                break;
            case 'Ｙ':
                width = 8;
                break;
            case 'Ｚ':
                width = 9;
                break;
            case 'ａ':
                width = 9;
                break;
            case 'ｂ':
                width = 9;
                break;
            case 'ｃ':
                width = 8;
                break;
            case 'ｄ':
                width = 9;
                break;
            case 'ｅ':
                width = 9;
                break;

            case 'ｆ':
                width = 9;
                break;
            case 'ｇ':
                width = 9;
                break;
            case 'ｈ':
                width = 9;
                break;
            case 'ｉ':
                width = 4;
                break;
            case 'ｊ':
                width = 6;
                break;
            case 'ｋ':
                width = 8;
                break;
            case 'ｌ':
                width = 4;
                break;
            case 'ｍ':
                width = 10;
                break;
            case 'ｎ':
                width = 9;
                break;
            case 'ｏ':
                width = 9;
                break;

            case 'ｐ':
                width = 9;
                break;
            case 'ｑ':
                width = 9;
                break;
            case 'ｒ':
                width = 9;
                break;
            case 'ｓ':
                width = 9;
                break;
            case 'ｔ':
                width = 9;
                break;
            case 'ｕ':
                width = 9;
                break;
            case 'ｖ':
                width = 9;
                break;
            case 'ｗ':
                width = 10;
                break;
            case 'ｘ':
                width = 8;
                break;
            case 'ｙ':
                width = 9;
                break;

            case 'ｚ':
                width = 9;
                break;
            case 'Ω':
                width = 10;
                break;
            case 'α':
                width = 9;
                break;
            case 'β':
                width = 9;
                break;
            case 'γ':
                width = 10;
                break;
            case 'ν':
                width = 9;
                break;
            case 'Ι':
                width = 5;
                break;
            case 'П':
                width = 8;
                break;
            case 'Ш':
                width = 11;
                break;
            case 'Ю':
                width = 10;
                break;
        }

        return width;
    }



    // Changes your typed character in JTextField t to its SJIS version
    public void filterKeys(javax.swing.JTextField t, java.awt.event.KeyEvent e){
        char original_char = e.getKeyChar();
        boolean change = false;

        byte[] sjis_char = charToSJIS(original_char);
        if (sjis_char[0] != 0)
            change = true;

        if (change){
            try {
                t.replaceSelection(""); // Cleans the selected text
                e.consume();
                int pos = t.getCaretPosition();
                String text = t.getText();
                String new_char = new String(sjis_char, font_encoding);
                //System.out.println("caret: " + pos + " length: " + text.length());
                if (pos == 0)
                    text = new_char + t.getText();
                else if (pos == text.length())
                    text = t.getText() + new_char;
                else
                    text = text.substring(0, pos) + new_char + text.substring(pos, text.length());
                //String text = textfieldTest.getText() + new String(sjis_char, "Shift-JIS");
                t.setText(text);
                t.setCaretPosition(pos + 1);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(UserInterfaceSE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }


    // Changes your typed character in JTextArea t to its SJIS version
    public void filterKeys(javax.swing.JTextArea t, java.awt.event.KeyEvent e){
        char original_char = e.getKeyChar();
        boolean change = false;

        byte[] sjis_char = charToSJIS(original_char);
        if (sjis_char[0] != 0)
            change = true;

        if (change){
            try {
                t.replaceSelection(""); // Cleans the selected text
                e.consume();
                int pos = t.getCaretPosition();
                String text = t.getText();
                String new_char = new String(sjis_char, font_encoding);
                //System.out.println("caret: " + pos + " length: " + text.length());
                if (pos == 0)
                    text = new_char + t.getText();
                else if (pos == text.length())
                    text = t.getText() + new_char;
                else
                    text = text.substring(0, pos) + new_char + text.substring(pos, text.length());
                //String text = textfieldTest.getText() + new String(sjis_char, "Shift-JIS");
                t.setText(text);
                t.setCaretPosition(pos + 1);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(UserInterfaceSE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }


    public byte[] charToSJIS(char c){
        /*
            0 = 48 -> 82 4f
            9 = 57 -> 82 58

            A = 65 -> 82 60
            Z = 90 -> 82 79

            a = 97 -> 82 81
            z = 122 -> 82 9a

            space -> 81 40
            , -> 81 41
            . -> 81 42
         */
        byte[] Jap_char = new byte[2];
        Jap_char[0] = (byte) 0x82;
        if (c >= 'a' && c <= 'z'){
            Jap_char[1] = (byte) 0x81;
            Jap_char[1] += c - 'a';
        }
        else if (c >= 'A' && c <= 'Z'){
            Jap_char[1] = (byte) 0x60;
            Jap_char[1] += c - 'A';
        }
        else if (c >= '0' && c <= '9'){
            Jap_char[1] = (byte) 0x4f;
            Jap_char[1] += c - '0';
        }
        else{ // Check if it's a special character
            int code = c;
            Jap_char[0] = (byte) 0x81;
            switch (code){
                case 32: // space = 32 -> 81 40
                    Jap_char[1] = (byte) 0x40;
                    break;
                case 33: // ! = 33 -> 81 49
                    Jap_char[1] = (byte) 0x49;
                    break;
                case 34: // " = 34 -> 81 8d
                    Jap_char[1] = (byte) 0x8d;
                    break;
                case 35: // # = 35 -> 81 94
                    Jap_char[1] = (byte) 0x94;
                    break;
                case 37: // % = 37 -> 81 93
                    Jap_char[1] = (byte) 0x93;
                    break;
                case 38: // & = 38 -> 81 95
                    Jap_char[1] = (byte) 0x95;
                    break;
                case 39: // ' = 39 -> 81 8c
                    Jap_char[1] = (byte) 0x8c;
                    break;
                case 40: // ( = 40 -> 81 69
                    Jap_char[1] = (byte) 0x69;
                    break;
                case 41: // ) = 41 -> 81 6a
                    Jap_char[1] = (byte) 0x6a;
                    break;
                case 42: // * = 42 -> 81 96
                    Jap_char[1] = (byte) 0x96;
                    break;
                case 43: // + = 43 -> 81 7b
                    Jap_char[1] = (byte) 0x7b;
                    break;
                case 44: // , = 44 -> 81 43
                    Jap_char[1] = (byte) 0x43;
                    break;
                case 45: // - = 45 -> 81 7c
                    Jap_char[1] = (byte) 0x7c;
                    break;
                case 46: // . = 46 -> 81 44
                    Jap_char[1] = (byte) 0x44;
                    break;
                case 47: // / = 47 -> 81 5e
                    Jap_char[1] = (byte) 0x5e;
                    break;
                case 58: // : = 58 -> 81 46
                    Jap_char[1] = (byte) 0x46;
                    break;
                case 59: // ; = 59 -> 81 47
                    Jap_char[1] = (byte) 0x47;
                    break;
                case 60: // < = 60 -> 81 83
                    Jap_char[1] = (byte) 0x83;
                    break;
                case 61: // = = 61 -> 81 81
                    Jap_char[1] = (byte) 0x81;
                    break;
                case 62: // > = 62 -> 81 84
                    Jap_char[1] = (byte) 0x84;
                    break;
                case 63: // ? = 63 -> 81 48
                    Jap_char[1] = (byte) 0x48;
                    break;
                case 64: // @ = 64 -> 81 97
                    Jap_char[1] = (byte) 0x97;
                    break;
                default:
                    Jap_char[0] = 0;
                    Jap_char[1] = 0;
            }
        }
        return Jap_char;
    }


    public void convertToSJIS(javax.swing.JTextArea t){
        String text = t.getText();
        String newText = "";

        for (int i = 0; i < text.length(); i++){
            char c = text.charAt(i);
            byte[] sjis_char = charToSJIS(c);

            if (sjis_char[0] != 0){
                try {
                    String new_char = new String(sjis_char, font_encoding);

                    newText += new_char;
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(UserInterfaceSE.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else{
                newText += c;
            }
        }

        t.setText(newText);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonJump;
    private javax.swing.JButton buttonNext;
    private javax.swing.JButton buttonPrevious;
    private javax.swing.JCheckBox checkConvert;
    private javax.swing.JCheckBox checkFemale;
    private javax.swing.JCheckBox checkVWF;
    private javax.swing.JComboBox comboLines;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelCurrent;
    private javax.swing.JLabel labelJump;
    private javax.swing.JLabel labelLines;
    private javax.swing.JLabel labelRemote;
    private javax.swing.JLabel labelRemoteLine;
    private javax.swing.JLabel labelRobot;
    private javax.swing.JLabel labelRobotRoute;
    private javax.swing.JLabel labelRouteLeft;
    private javax.swing.JLabel labelRouteRight;
    private javax.swing.JLabel labelSex;
    private javax.swing.JLabel labelSexRoute;
    private javax.swing.JLabel labelSpeakerEdit;
    private javax.swing.JLabel labelSpeakerOriginal;
    private javax.swing.JLabel labelTextOriginal;
    private javax.swing.JLabel labelVoiced;
    private javax.swing.JLabel labelVoicedLine;
    private javax.swing.JLabel labelWidthLeft;
    private javax.swing.JLabel labelWidthRight;
    private javax.swing.JLabel labelWidthTotalLeft;
    private javax.swing.JLabel labelWidthTotalRight;
    private javax.swing.JLabel labelWidthUsedLeft;
    private javax.swing.JLabel labelWidthUsedRight;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenu menuNavigate;
    private javax.swing.JMenu menuTools;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JMenuItem menuitemConvertL;
    private javax.swing.JMenuItem menuitemConvertR;
    private javax.swing.JMenuItem menuitemExit;
    private javax.swing.JMenuItem menuitemFirst;
    private javax.swing.JMenuItem menuitemHelp;
    private javax.swing.JMenuItem menuitemLast;
    private javax.swing.JMenuItem menuitemNext;
    private javax.swing.JMenuItem menuitemOpen;
    private javax.swing.JMenuItem menuitemPrevious;
    private javax.swing.JMenuItem menuitemSave;
    private javax.swing.JPanel panelEdit;
    private javax.swing.JPanel panelNavigation;
    private javax.swing.JPanel panelOriginal;
    private javax.swing.JPanel panelSettings;
    private javax.swing.JScrollPane scrollEditLeft;
    private javax.swing.JScrollPane scrollEditRight;
    private javax.swing.JScrollPane scrollOriginal;
    private javax.swing.JTextArea textareaEditLeft;
    private javax.swing.JTextArea textareaEditRight;
    private javax.swing.JTextArea textareaOriginal;
    private javax.swing.JTextField textfieldJump;
    private javax.swing.JTextField textfieldSpeakerEdit;
    private javax.swing.JTextField textfieldSpeakerOriginal;
    // End of variables declaration//GEN-END:variables

}
